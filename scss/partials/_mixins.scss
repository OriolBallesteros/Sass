//@mixin /name/ --> allows us create code snippets

//--brand--
@mixin blue-beans {
  @if $brand == blue-beans {
    @content;
  }
}

@mixin roger-rovers {
  @if $brand == roger-rovers {
    @content;
  }
}

@mixin pastry-pizza {
  @if $brand == pastry-pizza {
    @content;
  }
}


//--screen size--
@mixin tiny-screens(){
  @media only screen and (max-width: 320px){
    @content; 
  }
}

@mixin small-screens(){
  @media only screen and (max-width: 480px){
    @content; 
  }
}

@mixin medium-screens(){
  @media only screen and (max-width: 680px){
    @content; 
  }
}

@mixin large-screens(){
  @media only screen and (max-width: 960px){
    @content; 
  }
}



@mixin google-font($font){
  $font: unquote($font);
  @import url(https://fonts.googleapis.com/css?family=#{$font});  //#{} interpolation of variable
}

@mixin warning {                  
  background-color: orange;
  color: #fff;

  &:hover{
    background-color: lighten(orange, 10%);   //built-in function lighten()
  }
}
 
@mixin box-shadow($shadows...) {    //only one argument is defined because it's only of one type. When we call this mixin, first argument will fit first use, second the second...
    box-shadow: $shadows;
    -moz-box-shadow: $shadows;
    -webkit-box-shadow: $shadows;
}

@mixin apply-to-ie-6 {
    * html {
        @content;
    }
}

@mixin large-text {
  font: {             //this sintaxy stands for font-size, font-weight... anyting 'font-'
    size: 22px;
    weight: bold;
  }
}
  
@mixin rounded($radius: 6px) {       //default value
  border-radius: $radius;
}
  
@mixin box($radius: 6px, $border: 1px solid #000) {
  @include rounded($radius);  //passing a variables due to rounded is a mixin with arguments     
  border: $border;
}
  
@mixin fancy-links {
  a {
    font-style: italic;
    text-decoration: none;
  }
}